import numpy as np
import pytransform3d.visualizer as pv
from pytransform3d.rotations import matrix_from_euler, R_id
from pytransform3d.transformations import transform_from

# Ángulos fijos (Euler ZYX): roll (X), pitch (Y), yaw (Z)
final_roll = np.deg2rad(30)   # X
final_pitch = np.deg2rad(40)  # Y
final_yaw = np.deg2rad(90)    # Z

def update_trajectory(step, n_frames, trajectory):
    progress = (step + 1) / float(n_frames)
    H = np.empty((100, 4, 4))

    for i, t in enumerate(np.linspace(0, progress, len(H))):
        roll = t * final_roll
        pitch = t * final_pitch
        yaw = t * final_yaw

        # Rotación ZYX extrínseca
        angles = np.array([yaw, pitch, roll])
        R = matrix_from_euler(2, 1, 0, angles, extrinsic=True)

        # Transformación homogénea con rotación + desplazamiento
        T = transform_from(R=R, p=[t, 0, t])
        H[i] = T

    trajectory.set_data(H)
    return trajectory

# Crear figura y trayectoria inicial vacía
n_frames = 200
fig = pv.figure()

H = np.repeat(np.eye(4)[np.newaxis, :, :], 100, axis=0)  # 100 x 4 x 4 identidad
trajectory = pv.Trajectory(H, s=0.2, c=[0, 0, 0])
trajectory.add_artist(fig)

fig.view_init()
fig.set_zoom(0.5)

if "__file__" in globals():
    fig.animate(update_trajectory, n_frames=n_frames, fargs=(n_frames, trajectory), loop=True)
    fig.show()
else:
    fig.save_image("__open3d_rendered_image.jpg")
