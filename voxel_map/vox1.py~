# Update robot position to the specified coordinates
robot_pos = (0, 10, 2)

# Create the RViz-style scene with updated robot position
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
ax.set_title("Visualizaci√≥n Estilo RViz: Mapa Voxelizado 3D")

# Draw voxels
for (x, y, z) in free_voxels:
    draw_voxel(ax, x, y, z, color='lightblue')
for (x, y, z) in occupied_voxels:
    draw_voxel(ax, x, y, z, color='indigo')
for (x, y, z) in frontiers:
    draw_voxel(ax, x, y, z, color='limegreen')

# Simulated robot trajectory
trajectory = np.array([
    [2, 2, 1],
    [3, 3, 1],
    [4, 4, 1],
    [5, 5, 2],
    [6, 5, 2],
    [7, 5, 2],
    [robot_pos[0], robot_pos[1], robot_pos[2]]
])
ax.plot(trajectory[:, 0], trajectory[:, 1], trajectory[:, 2], color='red', linewidth=2, label='Trayectoria')

# Robot marker
ax.scatter(*robot_pos, color='red', s=200)

# Ground plane
xg, yg = np.meshgrid(np.arange(0, grid_size[0]), np.arange(0, grid_size[1]))
zg = np.zeros_like(xg)
ax.plot_surface(xg, yg, zg, color='lavender', alpha=0.2, zorder=0)

# Axes and view
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_xlim(0, grid_size[0])
ax.set_ylim(0, grid_size[1])
ax.set_zlim(0, grid_size[2])
ax.view_init(elev=30, azim=140)
ax.legend(loc='upper left')
plt.tight_layout()
plt.show()
